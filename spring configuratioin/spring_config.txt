Dependency Ingection in Spring with JavaConfig
Spring creates a container/context for beans, each bean is created once(singleton) only even if you use it in different places in your application.
JavaConfig is one of the ways to define dependencies in Spring.

It possible to have more that one javaconfig file for an application and you can also import one configuration file into another.

Use @Configuration annotation to define a java class as a configuration class

Example - javaconfig file that doesn’t use import from another config file:

@Configuration
public class AppConfig {
	
	@Bean
	public Game game(){
		return new BaseballGame(RedSox());	
	}

	@Bean 
	public Team RedSox(){
		return new RedSox();
}

Example - javaconfig file that uses import from another config file:

@Configuration
@Import(TeamConfig.class) - to import TeamConfig.class
public class AppConfig {

        //here home and team are the names of the beans that are located in TeamConfig
	@Bean
	public Game game(Team home, Team away){
		return new BaseballGame(home, away);	
	}
}

In the main method to create ApplicationContext:

	ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
	//here “game” is a name of the bean in config file
	Game game = context.getBean(“game", Game.class);
	System.out.println(game.playGame());

