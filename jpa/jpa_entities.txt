#####
JPA Entities
#####

In order to save an object in db its class should be annotated with @Entity.
Each class annotated with @Entity will be used to build a table in db to save objects of that class. 

Class name will be used to name a table and class fields will be used to name table columns. 
To rename a table column use @Colum(name=“name”);

Example:
	@Entity
	public class Shoe {

	@Column(name=“shoe_colour”)
	private String colour;


To specify primary key of an entity annotate id field with @Id annotation:

	@Entity
	public class Shoe{
    		@Id
    		@GeneratedValue(strategy=GenerationType.IDENTITY)
    		private long id;

@GeneratedValue(strategy=GenerationType.IDENTITY) - means ids will be automatically generated.

#####
Entities and @Embeddable
#####

An entity can have a field of type annotated with @Embeddable(Address.java class will be annotated with @Embeddable).This field must have @Embedded applied to it.

	@Embedded
	private Address address;

#####
Entities and Collections
#####

Entities may have collection (List, Map, Set) of **@Embeddebles or basic Java types(ie String) ONLY** as their properties.

An entity can use @ElementCollection to save a collection of **basic Java types(String, Integer)**.

Example:
	@Column(name="shoe_size")
	@ElementCollection(fetch=FetchType.EAGER)
	private Map<String, String> size = new HashMap<>();

An entity can use @ElementCollection and @Embeddable to save a collection of **@Embeddable** objects

Example:
	@ElementCollection(fetch=FetchType.EAGER)
	private List<Insole> insole = new ArrayList<>() ;

Insole class has to be annotated with @Embeddable.


@ElementCollection can have lazy and eager fetch type. 

## Eager fetch type means that collection objects are loaded into the memory when the entity with which the collection is associated is loaded. 
## When lazy loading is used collection objects are not loaded into the memory. To be able to load the collection objects a session must stay open when collection objects are used.

Example:
public static void printInsoles(long id) {
        Session session = sessionFactory.openSession();
        Shoe shoe = session.get(Shoe.class,id);  
        for(Insole i : shoe.getInsoles()){
           System.out.println(i);
        }
        session.close();
}


