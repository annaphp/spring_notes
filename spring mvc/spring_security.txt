Spring Security

Spring security provides handling of user authentication and authorization at the web
request level and at the method level.

Web Security Configuration.

1. Configuring Servlet Filters (filtering web requests)
   Spring Security has several servlet filters to provide security. You only need to
   configure one - DelegatingFilterProxy servlet filter.
   To configure DelegatingFilterProxy in Java Configuration you need to create 
   a configuration class that extends AbstractSecurityWebApplicationInitializer.
Example:
public class SecurityWebInitializer       extends AbstractSecurityWebApplicationInitializer {}

2. Web Security Configuration
Web Security Configuration file has to extend WebSecurityConfigurerAdapter and annotated 
with @EnableWebSecurity annotation which enables web security. There are three configure()
methods from WebSecurityConfigurerAdapter that can be overridden to configure 
the application specific security points.
  1 - configure(WebSecurity) - override to configure Srpring Security’s filter chain
  2 - configure(HttpSecurity) - override to configure how requests are secured by interceptors.
  3 - configure(AuthenticationMangerBuilder) - override to configure user-details services.

If you don’t override any on these methods, all application URLs will require a user authentication.

Before you will be able to configure a configure(AuthenticationManagerBuilder) method
you need to create User.java which should implement UserDetails interface, UserRepository for CRUD operations and UserService which should implement UserDetailsService.


Example of a web security configuration:

@Configuration
@EnableWebSecurity 
@ComponentScan("core") // WebSecurityConfig needs user details service and password encoder from core context
public class WebSecurityConfig extends WebSecurityConfigurerAdapter{
	
	@Autowired
	UserDetailsService userService;
	
	@Autowired
        PasswordEncoder passwordEncoder;
	
	@Autowired
        public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userService).passwordEncoder(passwordEncoder);
        }

        @Override
        public void configure(WebSecurity web) throws Exception {
        web.ignoring().antMatchers("/assets/**");
        }
	
	@Override
	protected void configure(HttpSecurity http) throws Exception {

		http
		  .formLogin().defaultSuccessUrl("/books/all", true)
		    .loginPage("/login") // custom login page 
		    .permitAll()
		  .and()
		  .authorizeRequests()
		    .antMatchers(“/create”,”/edit/**").hasRole("USER")		  
		    .and()
		    .logout()
    	          .logoutSuccessUrl(“/home”) 
		  .and()
		  .csrf();  
	 }	
}

Method Security Configuration
To enable method security create a configuration file annotated with @EnableGlobalMethodSecurity(securedEnabled=true).
Example:
@Configuration
@EnableGlobalMethodSecurity(securedEnabled=true)
public class MethodSecurityConfig
extends GlobalMethodSecurityConfiguration {}

And to add security to a method use @Secured annotation, as shown below:
@Secured({"ROLE_ADMIN"})
public void addUser(User user) {…}

